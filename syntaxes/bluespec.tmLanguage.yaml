# 1 "bluespec.tmLanguageRaw.yaml"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "./macros.h" 1
# 32 "<command-line>" 2
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "bluespec.tmLanguageRaw.yaml"
$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: Bluespec SystemVerilog

patterns:
  - include: '#whitespace'
  - include: '#directives'
  - include: '#keyword'
  - include: '#literal'

  - include: "#declarations"

  - include: "#enum_detect"
  - include: "#action_detect"
  - include: '#identifier'
repository:

  whitespace: # Check macros.h
    patterns:
      - include: 'pure_whitespace'
      - include: '#ifdef'
      - include: '#block_comment'
      - include: '#single_comment'

  directives:
    patterns:
      - include: '#attribute'
      - include: '#define'

  keyword:
    patterns:
      - include: '#action'
      - include: '#control'
      - include: '#declare_keyword'

  literal:
    patterns:
      - include: '#string'
      - include: '#real'
      - include: '#integer'

  enum_detect:
    patterns:
      - include: '#enum_argument'
      - include: '#enum_list'
      - include: '#enum_conditional'
      - include: '#enum_case' # May also need to use the case endcase.

  action_detect:
    patterns:
      - include: '#left_assignment'
      - include: '#right_actionvalue'
      - include: '#dot_access' # later decompose into method and struct
      - include: '#standalone_call' # functions

  identifier:
    patterns:
      - include: '#system_task'
      - include: '#type'
      - include: '#lower_identifier'

  left_assignment: # e.g., state <= True
    name: entity.name.function.bluespec
    match: ((?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b))(?=\s*((\[.*\]\s*)*)<=)

  right_actionvalue: # e.g., Reg#(Bit#(4)) <- mkRegU
    name: entity.name.function.bluespec # but not method hosts ^^^^^^
    match: (?<=<-)(?:\s*)((?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b))(?!\.)



  dot_access:
    patterns:
      - include: '#assignment_dot' # =
      - include: '#actionvalue_dot' # <-
      - include: '#lone_dot' # (not in brackets or case-case(imperfect))
      - include: '#generic_dot' # leftover

  lone_dot: # TODO fold into multiline rules
    name: entity.name.function.bluespec # make sure not an arg
    match: (?x)
      (?<![\(\[\{].*)
      (((?<=\.\s*)(?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b)))

  actionvalue_dot:
    name: entity.name.function.bluespec # on right side of <-; ActionValue
    match: (?x)
      (?<=(<-).*)
      (((?<=\.\s*)(?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b)))

  assignment_dot: # imperfect for method m = e.m;
    name: variable.bluespec # on right side of =; assume struct access or read
    match: (?x)
      (?<=(=).*)
      (((?<=\.\s*)(?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b)))

  generic_dot: # bug catcher
    name: invalid.bluespec
    match: (((?<=\.\s*)(?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b)))

  standalone_call: # ; do_this; or_this(arg);
    name: entity.name.function.bluespec
    match: (?<=^\s*)(?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b)(?=\s*[;\(])

  ifdef:
    begin: (`ifdef)(?:\s+)((?:[\p{Alpha}\d\$_])+)
    end: (`endif)
    beginCaptures:
      1:
        name: keyword.control.bluespec
      2:
        name: meta.preprocessor.bluespec
    endCaptures:
      1:
        name: keyword.control.bluespec
    patterns:
      - include: $self

  define:
    match: (`define)(?:\s+)((?:[\p{Alpha}\d\$_])+)
    captures:
      1:
        name: keyword.control.bluespec
      2:
        name: meta.preprocessor.bluespec

  action:
    patterns:
      - name: constant.language.bluespec
        match: (?:ActionValue\s*#|Action)

  control:
    patterns:
      - name: keyword.control.bluespec
        match: (?x)\b
          (?:case|matches|endcase|type|else|for|if|return|while)\b

  declare_keyword:
    patterns:
      - name: storage.type.bluespec
        match: (?x)\b
          (?:function|instance|interface|method|module|package|
          rule|rules|typeclass|typedef|struct|tagged|union|enum|
          endfunction|endinstance|endinterface|endmethod|endmodule|
          endpackage|endrule|endrules|endtypeclass|deriving|begin|end|
          let|action|endaction)\b

  pure_whitespace:
    name: markup.whitespace.bluespec
    match: \s+

  string:
    name: string.quoted.double.bluespec
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.bluespec
        match: '\\.'

  single_comment:
    name: comment.line.double-slash.bluespec
    match: '//.*'

  block_comment:
    name: comment.block.bluespec
    begin: '/\*'
    end: '\*/'

  attribute: # e.g. (* synthesize *)
    name: meta.preprocessor.bluespec
    match: '\(\* .* \*\)'

  type:
    name: entity.name.class.bluespec
    match: (?:(?:\b\p{Upper}(?:[\p{Alpha}\d\$_])*)\s*#?) # wrap parentheses because first group non-capture

  lower_identifier:
    name: variable.bluespec
    match: ((?:\b\p{Lower}(?:[\p{Alpha}\d\$_])*\b)\b)

  system_task:
    name: support.function.bluespec
    match: \$(?:[\p{Alpha}\d\$_])*\b

  integer:
    patterns:
      - name: constant.numeric.bluespec
        match: \d*'(?:d[\d_]+|(h|x)[\h_]+|o[0-7_]+|b[01_]+)\b  # 32'd2424 kind
      - name: constant.numeric.bluespec
        match: '\b\d+\b' # normal kind

  real:
    patterns:
      - name: constant.numeric.bluespec
        match: '\b\d[\d_]*(?:\.[\d_]+)?(?:[Ee][+-]?[\d_]+)?\b'

scopeName: source.bsv
