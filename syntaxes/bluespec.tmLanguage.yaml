# 1 "bluespec.tmLanguageRaw.yaml"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "./macros.h" 1
# 32 "<command-line>" 2
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "bluespec.tmLanguageRaw.yaml"

## Copyright 2023 Martin Chan
##
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without
## restriction, including without limitation the rights to use, copy,
## modify, merge, publish, distribute, sublicense, and/or sell copies
## of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: Bluespec SystemVerilog

patterns:
  - include: '#always'
  - include: '#remainder'
  - name: invalid.catch_all.bluespec # catch-all
    match: \w+
repository:

  always:
    patterns:
      - include: '#whitespace'
      - include: '#directives'
      - include: '#brackets'
      - include: '#keyword'
      - include: '#literal'

  remainder:
    patterns:
      - include: "#declarations"
      - include: "#action_detect"
      - include: '#enum_detect' # niche rule
      - include: '#identifier'

  whitespace: # Check macros.h
    patterns:
      - include: 'pure_whitespace'
      - include: '#ifdef'
      - include: '#block_comment'
      - include: '#single_comment'

  directives:
    patterns:
      - include: '#import'
      - include: '#include'
      - include: '#attribute'
      - include: '#define'
      - include: '#struct_instantiation'
      - include: '#tagged_union_instantiation'
      - include: '#tagged_tag'

  brackets: # things behave differently in brackets
    patterns:
      - include: '#parameter' # follows a #; e.g. Bit#(4)
      - include: '#conditional' # if and if-less guard (&&&)
      - include: '#argument_list' # in call only
      - include: '#curly_braces'
      - include: '#case' # simple case
      - include: '#index' # e.g. arr[a.b][12]

  keyword:
    patterns:
      - name: punctuation.bluespec
        match: '[;\(\)\{\}]'
      - name: constant.language.bluespec
        match: \?
      - name: constant.language.bluespec
        match: (void)
      - include: '#action'
      - include: '#return_statement'
      - include: '#control'
      - include: '#operator'
      - include: '#declare_keyword'
      - include: '#minispec'
      - name: invalid.deprecated.bluespec
        match: \b((?:alias|always|always_comb|always_ff|always_latch|and|assert|assert_strobe |assign|assume|automatic|before|begin|end|bind|bins|binsof|bit|break|buf |bufif0|bufif1|byte|casex|casez|cell|chandle|class|endclass |clocking|endclocking|cmos|config|endconfig|const|constraint|context|continue |cover|covergroup|endgroup|coverpoint|cross|deassign|default|defparam|design |disable|dist|do|edge|event|expect|export|extends|extern|final |first_match|force|foreach|forever|fork|forkjoin |generate|endgenerate|genvar|highz0|highz1|iff|ifnone|ignore_bins |illegal_bins|import|incdir|include|initial|inout|inside|instance |int|integer|intersect|join|join_any|join_none |large|liblist|library|local|localparam|logic|longint|macromodule |matches|medium|modport|nand|negedge|new|nmos|nor |noshowcancelled|not|notif0|notif1|null|or|output|package|endpackage |packed|parameter|pmos|posedge|primitive|endprimitive|priority|program |endprogram|property|endproperty|protected|pull0|pull1|pulldown|pullup |pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence |rcmos|real|realtime|ref|reg|release|repeat|rnmos|rpmos|rtran |rtranif0|rtranif1|scalared|sequence|endsequence|shortint|shortreal |showcancelled|signed|small|solve|specify|endspecify|specparam|static |string|strong0|strong1|super|supply0|supply1|table|endtable |tagged|task|endtask|this|throughout|time|timeprecision|timeunit|tran |tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type |union|unique|unsigned|use|var|vectored|virtual|void|wait|wait_order |wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor))\b

  literal:
    patterns:
      - include: '#string'
      - include: '#real'
      - include: '#integer'

  declarations:
    patterns:
      - name: entity.name.function.bluespec
        match: (?<=module\s+)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)(#?)
      - name: entity.name.function.bluespec
        match: (?<=rule\s+)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)
      - name: entity.name.function.bluespec
        match: (?x)
          (?<=(method|function).*)
          ((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)
          (?=(\s+if|\s*[;\(=]))
      - name: entity.name.function.bluespec
        match: (?<=interface\s+)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)

  action_detect:
    patterns:
      - include: '#assignments'
      - include: '#left_assignment'
      - include: '#dot_access' # later decompose into method and struct
      - include: '#standalone_call' # functions

  identifier:
    patterns:
      - include: '#system_task'
      - include: '#type'
      - include: '#lower_identifier'


##
  minispec:
    name: storage.type.bluespec
    match: (input)

  assignments:
    patterns:
      - include: '#short_action_actionvalue'
      - include: '#short_pure_function'
    name: meta.assignment

  short_action_actionvalue:
    begin: (?x)
      (?<=(function|method)\s+(Action|((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)).*)
      (?:=)
    end: (?:;)
    patterns:
      - include: '#always'
      - include: '#standalone_call_action'
      - include: '#lone_dot'
      - include: '#remainder'

  short_pure_function:
    begin: (?x)
      (?<=(function|method).*)
      (?:=)
    end: (?:;)
    patterns:
      - include: '#always'
      - include: '#standalone_call_pure'
      - include: '#lower_identifier'
      - include: '#dot_read_all'

  return_statement: # Assumes no action
    begin: (return)
    end: (?:;)
    patterns:
      - include: '#always'
      - include: '#dot_read_all'
      - include: '#remainder'
    beginCaptures:
      1:
        name: keyword.control.bluespec

  sole_unpack:
    name: variable.bluespec
    match: (?x)
      (?<=tagged\s+((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)\s+\.\s*)
      ((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)
      (?=\s*:)

  operator:
    name: keyword.operator.bluespec
    match: (?x) (
      (?:<-|<=|\.|,|:) |
      (?:<<|>>|<=|>=|<|>) |
      (?:[\!=]?=) |
      &&& |
      [\|&]{2} |
      (?:~?[&\|\^]) |
      \^~ |
      [\+\-!~] |
      [\*\/%] )

  index:
    begin: (\[)
    end: (\])
    patterns:
      - include: '#always'
      - include: '#lower_identifier'
      - include: '#dot_access'
      ## - include: '#remainder'
    captures:
      1:
        name: punctuation.bluespec

  case:
    begin: (case)
    end: (endcase)
    patterns:
      - include: '#always'
      - include: '#tagged_tag'
      - name: variable.other.constant.enum.bluespec
        match: (?<!:.*)((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)(?=[^;]*:?)
      - include: '#sole_unpack'
      - include: '#remainder'
    captures:
      1:
        name: keyword.control.bluespec

  conditional: # rather abstract rule
    begin: (?x)
      (?<=
        (?:if |
        rule.*((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)
        )
      )
      (?:\s*\()
    end: (?x)
      (?:\))
    patterns: # short-circuit from context
      - include: '#always'
      - include: '#dot_read_all'
      - include: '#tagged_tag'
      - name: variable.other.constant.enum.bluespec
        match: (?<!tagged\s+)((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)(?!\s+((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b))
      - include: '#remainder'

  argument_list:
    begin: (?x)
      (?<!(?:module|method|function|for|return|deriving).*)
      (?<=((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b))
      (?:\s*\()
    end: (?x)
      (?:\))
    patterns:
      - include: '#always'
      - include: '#dot_read_all'
      - include: '#system_task'
      - include: '#lower_identifier'
      - include: '#tagged_union_instantiation'
      - name: variable.other.constant.enum.bluespec
        match: ((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)(?!\s*[#\(\{])
      - include: '#type'

  curly_braces: # typedef enum, match, tagged matching
    begin: (?x)
      (?<!(?:union\s+tagged|struct)\s*)
      (?:\{)
    end: (?:\})
    patterns:
      - include: '#always'
      - include: '#curly_braces'
      - include: '#dot_read_all'
      - include: '#lower_identifier'
      - name: variable.other.constant.enum.bluespec
        match: ((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)
    captures:
      1:
        name: punctuation.bluespec
    ## name: _INVALID

  dot_read_all:
    name: variable.bluespec
    match: (((?<=\.\s*)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)))

  enum_detect: # very narrow <=/= Enum; case
    name: variable.other.constant.enum.bluespec
    match: (?<=(<?=)\s*)((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)(?=\s*;)

  left_assignment: # e.g., state <= True
    name: entity.name.function.bluespec
    match: (((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b))(?=\s*((\[.*\]\s*)*)<=)

  tagged_tag:
    name: variable.other.constant.tag.bluespec
    match: (?<=tagged\s+)((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)

  tagged_union_instantiation:
    name: variable.other.constant.tag.bluespec
    match: (?x)
      ((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)
      (?=\s*\()

  struct_instantiation:
    name: invalid.struct.bluespec
    match: (?x)
      ((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)
      (?=\s*\{)

  ## we need to handle inside (multiline) brackets separately
  ## very ambiguous: could be action, read, or struct_access
  dot_access:
    patterns:
      - include: '#interface_dot'
      - include: '#assignment_dot' # =
      - include: '#actionvalue' # <- also covers func
      - include: '#lone_dot' # (not in brackets or case-case(imperfect))
      - include: '#assign_to_dot'
      - include: '#generic_dot' # leftover

  lone_dot: # TODO fold into multiline rules
    name: entity.name.function.bluespec # make sure not an arg
    match: (?x)
      (((?<=\.\s*)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)))(?!.*=.*)

  assign_to_dot:
    name: variable.bluespec
    match: (?x)
      (((?<=\.\s*)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)))(?=.*=.*)

  actionvalue:
    name: entity.name.function.bluespec # on right side of <-; ActionValue
    match: (?x)
      (?<=(<-).*)
      ((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)
      (?!\s*\.)

  interface_dot: # bug catcher
    name: variable.bluespec
    match: (((?<=\.\s*)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)))(?=\s*\.)

  assignment_dot: # imperfect for method m = e.m;
    name: variable.bluespec # on right side of =; assume struct access or read
    match: (?x)
      (?<=([=:]).*)
      (((?<=\.\s*)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)))

  generic_dot: # bug catcher
    name: _INVALID
    match: (((?<=\.\s*)((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)))

  standalone_call_action:
    name: entity.name.function.bluespec
    match: ((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)(?=\s*\()

  standalone_call_pure:
    name: variable.bluespec
    match: ((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)(?=\s*\()

  standalone_call: # ; do_this; or_this(arg);
    name: entity.name.function.bluespec
    match: (?x)
      (?<=(^\s*|if\s*\(.*\)[^=]*)|interface.*)
      ((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)
      (?=\s*[;\(])

  ifdef:
    patterns:
      - match: (`ifdef)(?:\s+)((?:[\p{Alpha}\d\$_])+)
        captures:
          1:
            name: keyword.control.bluespec
          2:
            name: meta.preprocessor.bluespec
      - match: (`endif)
        name: keyword.control.bluespec
  ## begin: (`ifdef)(?:\s+)((?:[\p{Alpha}\d\$_])+)
  ## end: (`endif)
  ## beginCaptures:
  ## 1:
  ## name: keyword.control.bluespec
  ## 2:
  ## name: meta.preprocessor.bluespec
  ## endCaptures:
  ## 1:
  ## name: keyword.control.bluespec
  ## patterns:
  ## - include: $self

  define:
    match: (`define)(?:\s+)((?:[\p{Alpha}\d\$_])+)
    captures:
      1:
        name: keyword.control.bluespec
      2:
        name: meta.preprocessor.bluespec

  include:
    name: keyword.control.bluespec
    match: (`include)

  import:
    name: support.class.bluespec
    match: (?x)
      (?<=import\s+)
      ((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)

  action:
    patterns:
      - name: constant.language.bluespec
        match: (?:ActionValue\s*#|Action\b)

  control:
    patterns:
      - name: keyword.control.bluespec
        match: (?x)\b
          (?:case|match|matches|endcase|default|type|else|for|if|return|while|import)\b

  declare_keyword:
    patterns:
      - name: storage.type.bluespec
        match: (?x)\b
          (?:function|instance|interface|method|module|package|
          rule|rules|typeclass|typedef|struct|tagged|union|enum|
          endfunction|endinstance|endinterface|endmethod|endmodule|
          endpackage|endrule|endrules|endtypeclass|deriving|begin|end|
          let|action|endaction|provisos|actionvalue|endactionvalue)\b

  pure_whitespace:
    name: markup.whitespace.bluespec
    match: \s+

  string:
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.bluespec
        match: '\\.'
      - name: constant.other.placeholder.bluespec
        match: (%[0-9]*[dxhob])
    name: string.quoted.double.bluespec

  single_comment:
    name: comment.line.double-slash.bluespec
    match: '//.*'

  block_comment:
    name: comment.block.bluespec
    begin: '/\*'
    end: '\*/'

  attribute: # e.g. (* synthesize *)
    name: meta.preprocessor.bluespec
    match: '\(\* .* \*\)'

  type:
    name: entity.name.class.bluespec
    match: (?:((?:\b_?[\p{Upper}](?:[\p{Alpha}\d\$_])*)\b)(\s*#)?) # wrap parentheses because first group non-capture

  lower_identifier:
    name: variable.bluespec
    match: (((?:\b_?[\p{Lower}](?:[\p{Alpha}\d\$_])*)\b)\b)

  system_task:
    name: support.function.bluespec
    match: \$(?:[\p{Alpha}\d\$_])*\b

  integer:
    patterns:
      - name: constant.numeric.bluespec
        match: \d*'(?:d[\d_]+|(h|x)[\h_]+|o[0-7_]+|b[01_]+)\b  # 32'd2424 kind
      - name: constant.numeric.bluespec
        match: '\b\d+\b' # normal kind

  real:
    patterns:
      - name: constant.numeric.bluespec
        match: '\b\d[\d_]*(?:\.[\d_]+)?(?:[Ee][+-]?[\d_]+)?\b'

scopeName: source.bsv
