$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: Bluespec SystemVerilog

patterns:
  - include: '#short_assignments'
  - include: '#always'
  - include: '#remainder'
  - name: _INVALID  # catch-all
    match: \w+
repository:

  always:
    patterns:
      - include: '#whitespace'
      - include: '#directives'
      - include: '#brackets'
      - include: '#keyword'
      - include: '#literal'

  remainder:
    patterns:
      - include: "#declarations"
      - include: "#action_detect"
      - include: '#enum_detect'  # niche rule
      - include: '#identifier'

  whitespace:  # Check macros.h
    patterns:
      - include: 'pure_whitespace'
      - include: '#ifdef' 
      - include: '#block_comment'
      - include: '#single_comment'

  directives:
    patterns:
      - include: '#import'
      - include: '#include'
      - include: '#attribute'
      - include: '#define'

  brackets:  # things behave differently in brackets
    patterns: 
      - include: '#parameter'  # follows a #; e.g. Bit#(4)  
      - include: '#conditional'  # if and if-less guard (&&&)
      - include: '#argument_list'  # in call only
      - include: '#curly_braces'
      - include: '#case'  # simple case
      - include: '#index'  # e.g. arr[a.b][12]

  keyword:
    patterns:
      - name: _PUNCTUATION
        match: '[;\(\)\{\}]'
      - name: _DONT_CARE
        match: \?
      - include: '#action'
      - include: '#return_statement'
      - include: '#control'
      - include: '#operator'
      - include: '#declare_keyword'
      - name: _DEPRECATED
        match: \b(SV_KEYWORDS)\b

  literal:
    patterns:
      - include: '#string'
      - include: '#real'
      - include: '#integer'

  declarations:
    patterns:
      - name: _FUNCTION
        match: (?<=module\s+)(LOWER_IDENTIFIER)(#?)
      - name: _FUNCTION
        match: (?<=rule\s+)(LOWER_IDENTIFIER)
      - name: _FUNCTION
        match: (?x)
          (?<=(method|function).*)
          (LOWER_IDENTIFIER)
          (?=(\s+if|\s*[;\(=]))

  action_detect:
    patterns:
      - include: '#short_assignments'
      - include: '#left_assignment'
      - include: '#right_actionvalue'
      - include: '#dot_access'  # later decompose into method and struct
      - include: '#standalone_call'  # functions

  identifier:
    patterns:
      - include: '#system_task'
      - include: '#type'
      - include: '#lower_identifier'


###

  short_assignments:
    patterns:
      - include: '#short_action_actionvalue'
      - include: '#short_pure_function'
    name: _SHORT_ASSIGNMENT

  # short_action_actionvalue:
  #   begin: (?x)
  #     (?<=(function|method)\s+Action.*)
  #     (?:=)
  #   end: (?:;)
  #   patterns:
  #     - include: '#always'
  #     - include: '#standalone_call_action'  
  #     - include: '#lone_dot'

  short_pure_function:
    begin: (?x)
      (?<=(function|method).*)
      (?:=)
    end: (?:;)
    patterns:
      - include: '#always'
      - include: '#standalone_call_pure'
      - include: '#lower_identifier'
      - include: '#dot_read_all'

  return_statement:  # Assumes no action
    begin: (return)
    end: (?:;)
    patterns:
      - include: '#always'
      - include: '#dot_read_all'
      - include: '#remainder'
    beginCaptures:
      1:
        name: _CONTROL

  sole_unpack:
    name: _VARIABLE
    match: (?x)
      (?<=tagged\s+(UPPER_IDENTIFIER)\s+\.\s*)
      (LOWER_IDENTIFIER)
      (?=\s*:)

  operator:
    name: _OPERATOR
    match: (?x) (
      (?:<-|<=|\.|,|:)    |
      (?:<<|>>|<=|>=|<|>) |
      (?:[\!=]?=)         |
      [\|&]{2}            |
      &&&                 |
      (?:~?[&\|\^])       |
      \^~                 |
      [\+\-!~]            |
      [\*\/%]             )

  index:
    begin: (\[)
    end: (\])
    patterns:
      - include: '#always'
      - include: '#lower_identifier'
      - include: '#dot_access'
      # - include: '#remainder'
    captures:
      1:
        name: _PUNCTUATION

  case:
    begin: (case)
    end: (endcase)
    patterns:
      - include: '#always'
      - name: _ENUM
        match: (ENUM)(?=\s*:)
      - include: '#sole_unpack'
      - include: '#remainder'
    captures:
      1:
        name: _CONTROL

  conditional: # rather abstract rule
    begin: (?x)
      (?<=
        (?:if                    |
        rule.*(LOWER_IDENTIFIER)
        )
      )
      (?:\s*\()
    end: (?x)
      (?:\))
    patterns:  # short-circuit from context
      - include: '#always'
      - include: '#dot_read_all'
      - name: _ENUM
        match: (?<!tagged\s+)(UPPER_IDENTIFIER)(?!\s+(LOWER_IDENTIFIER))
      - include: '#remainder'

  argument_list:
    begin: (?x)
      (?<!(?:module|method|function|for|return|deriving).*)
      (?<=(LOWER_IDENTIFIER))
      (?:\s*\()
    end: (?x)
      (?:\))
    patterns:
      - include: '#always'
      - include: '#dot_read_all'
      - include: '#system_task'
      - include: '#lower_identifier'
      - name: _ENUM
        match: (ENUM)(?![#\(\{])
      - include: '#type'

  curly_braces:  # typedef enum, match, tagged matching
    begin: (?x)
      (?<!(?:union\s+tagged|struct)\s*)
      (?:\{)
    end: (?:\})
    patterns:
      - include: '#always'
      - include: '#curly_braces'
      - include: '#dot_read_all'
      - include: '#lower_identifier'
      - name: _ENUM
        match: (ENUM)
    captures:
      1:
        name: _PUNCTUATION
    # name: _INVALID

  dot_read_all:
    name: _VARIABLE
    match: (DOT_ACCESS)

  enum_detect:  # very narrow <= Enum; case
    name: _ENUM
    match: (?<=(<=)\s*)(UPPER_IDENTIFIER)(?=\s*;)

  left_assignment:  # e.g., state <= True
    name: _FUNCTION
    match: ((LOWER_IDENTIFIER))(?=\s*(ARRAY_INDEXING)<=)

  right_actionvalue:  # e.g., Reg#(Bit#(4)) <- mkRegU
    name: _FUNCTION   # but not method hosts   ^^^^^^
    match: (?<=<-)(?:\s*)((LOWER_IDENTIFIER))(?!\.)

  # we need to handle inside (multiline) brackets separately
  # very ambiguous: could be action, read, or struct_access
  dot_access:
    patterns:
      - include: '#assignment_dot' # =
      - include: '#actionvalue_dot' # <-
      - include: '#lone_dot'  # (not in brackets or case-case(imperfect))
      - include: '#generic_dot' # leftover

  lone_dot:  # TODO fold into multiline rules
    name: _FUNCTION  # make sure not an arg
    match: (?x)
      (?<![\(\[\{].*)
      (DOT_ACCESS)

  actionvalue_dot:
    name: _FUNCTION  # on right side of <-; ActionValue
    match: (?x)
      (?<=(<-).*)
      (DOT_ACCESS)

  assignment_dot:  # imperfect for method m = e.m;
    name: _VARIABLE  # on right side of =; assume struct access or read
    match: (?x)
      (?<=(=).*)
      (DOT_ACCESS)

  generic_dot:  # bug catcher
    name: _INVALID
    match: (DOT_ACCESS)

  standalone_call_action:
    name: _FUNCTION
    match: (LOWER_IDENTIFIER)(?=\s*\()

  standalone_call_pure:
    name: _VARIABLE
    match: (LOWER_IDENTIFIER)(?=\s*\()

  standalone_call:   # ; do_this; or_this(arg);
    name: _FUNCTION
    match: (?x)
      (?<=(^\s*|if\s*\(.*\).*)|interface.*)
      (LOWER_IDENTIFIER)
      (?=\s*[;\(])

  ifdef:
    begin: (`ifdef)(?:\s+)(ANY_IDENTIFIER)
    end: (`endif)
    beginCaptures:
      1:
        name: _CONTROL
      2:
        name: _DIRECTIVE
    endCaptures:
      1:
        name: _CONTROL
    patterns:
      - include: $self

  define:
    match: (`define)(?:\s+)(ANY_IDENTIFIER)
    captures:
      1:
        name: _CONTROL
      2:
        name: _DIRECTIVE

  include:
    name: _CONTROL
    match: (`include)

  import:
    name: _SUPPORT
    match: (?x)
      (?<=import\s+)
      (UPPER_IDENTIFIER) 

  action:
    patterns:
      - name: _ACTION
        match: (?:ActionValue\s*#|Action)

  control:
    patterns:
      - name: _CONTROL
        match: (?x)\b
          (?:case|match|matches|endcase|type|else|for|if|return|while|import)\b
  
  declare_keyword:
    patterns:
      - name: _TYPE_PRIMITIVE
        match: (?x)\b
          (?:function|instance|interface|method|module|package|
          rule|rules|typeclass|typedef|struct|tagged|union|enum|
          endfunction|endinstance|endinterface|endmethod|endmodule|
          endpackage|endrule|endrules|endtypeclass|deriving|begin|end|
          let|action|endaction|provisos|actionvalue|endactionvalue)\b

  pure_whitespace:
    name: markup.whitespace.bluespec
    match: \s+

  string:
    name: _STRING_DOUBLE
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.bluespec
        match: '\\.'

  single_comment:
    name: comment.line.double-slash.bluespec
    match: '//.*'

  block_comment:
    name: _BLOCK_COMMENT
    begin: '/\*'
    end: '\*/'

  attribute:  # e.g. (* synthesize *)
    name: _DIRECTIVE
    match: '\(\* .* \*\)'
  
  type:
    name: _CLASS
    match: (TYPE)  # wrap parentheses because first group non-capture
  
  lower_identifier:
    name: _VARIABLE
    match: ((LOWER_IDENTIFIER)\b)
  
  system_task:
    name: _SYSTEM_FUNCTION
    match: \$(IDENTIFIER_CHAR)*\b

  integer:
    patterns:
      - name: _NUMBER
        match: \d*'(?:d[\d_]+|(h|x)[\h_]+|o[0-7_]+|b[01_]+)\b  # 32'd2424 kind
      - name: _NUMBER
        match: '\b\d+\b'  # normal kind
  
  real:
    patterns:
      - name: _NUMBER
        match: '\b\d[\d_]*(?:\.[\d_]+)?(?:[Ee][+-]?[\d_]+)?\b'

scopeName: source.bsv