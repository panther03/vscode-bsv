$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: Bluespec SystemVerilog

patterns:
  - include: '#whitespace'
  - include: '#directives'
  - include: '#keyword'
  - include: '#literal'
  
  - include: "#declarations"

  - include: "#enum_detect"
  - include: "#action_detect"
  - include: '#identifier'
repository:

  whitespace:  # Check macros.h
    patterns:
      - include: 'pure_whitespace'
      - include: '#ifdef' 
      - include: '#block_comment'
      - include: '#single_comment'

  directives:
    patterns:
      - include: '#attribute'
      - include: '#define'

  keyword:
    patterns:
      - include: '#action'
      - include: '#control'
      - include: '#declare_keyword'

  literal:
    patterns:
      - include: '#string'
      - include: '#real'
      - include: '#integer'

  enum_detect:
    patterns:
      - include: '#enum_argument'
      - include: '#enum_list'
      - include: '#enum_conditional'
      - include: '#enum_case'  # May also need to use the case endcase.

  action_detect:
    patterns:
      - include: '#left_assignment'
      - include: '#right_actionvalue'
      - include: '#dot_access'  # later decompose into method and struct
      - include: '#standalone_call'  # functions

  identifier:
    patterns:
      - include: '#system_task'
      - include: '#type'
      - include: '#lower_identifier'

  left_assignment:  # e.g., state <= True
    name: _FUNCTION
    match: ((LOWER_IDENTIFIER))(?=\s*(ARRAY_INDEXING)<=)

  right_actionvalue:  # e.g., Reg#(Bit#(4)) <- mkRegU
    name: _FUNCTION   # but not method hosts   ^^^^^^
    match: (?<=<-)(?:\s*)((LOWER_IDENTIFIER))(?!\.)

  # we need to handle inside (multiline) brackets separately
  # very ambiguous: could be action, read, or struct_access
  dot_access:
    patterns:
      - include: '#assignment_dot' # =
      - include: '#actionvalue_dot' # <-
      - include: '#lone_dot'  # (not in brackets or case-case(imperfect))
      - include: '#generic_dot' # leftover

  lone_dot:  # TODO fold into multiline rules
    name: _FUNCTION  # make sure not an arg
    match: (?x)
      (?<![\(\[\{].*)
      (DOT_ACCESS)

  actionvalue_dot:
    name: _FUNCTION  # on right side of <-; ActionValue
    match: (?x)
      (?<=(<-).*)
      (DOT_ACCESS)

  assignment_dot:  # imperfect for method m = e.m;
    name: _VARIABLE  # on right side of =; assume struct access or read
    match: (?x)
      (?<=(=).*)
      (DOT_ACCESS)

  generic_dot:  # bug catcher
    name: _INVALID
    match: (DOT_ACCESS)

  standalone_call:   # ; do_this; or_this(arg);
    name: _FUNCTION
    match: (?<=^\s*)(LOWER_IDENTIFIER)(?=\s*[;\(])

  ifdef:
    begin: (`ifdef)(?:\s+)(ANY_IDENTIFIER)
    end: (`endif)
    beginCaptures:
      1:
        name: _CONTROL
      2:
        name: _DIRECTIVE
    endCaptures:
      1:
        name: _CONTROL
    patterns:
      - include: $self

  define:
    match: (`define)(?:\s+)(ANY_IDENTIFIER)
    captures:
      1:
        name: _CONTROL
      2:
        name: _DIRECTIVE

  action:
    patterns:
      - name: _ACTION
        match: (?:ActionValue\s*#|Action)

  control:
    patterns:
      - name: _CONTROL
        match: (?x)\b
          (?:case|matches|endcase|type|else|for|if|return|while)\b
  
  declare_keyword:
    patterns:
      - name: _TYPE_PRIMITIVE
        match: (?x)\b
          (?:function|instance|interface|method|module|package|
          rule|rules|typeclass|typedef|struct|tagged|union|enum|
          endfunction|endinstance|endinterface|endmethod|endmodule|
          endpackage|endrule|endrules|endtypeclass|deriving|begin|end|
          let|action|endaction)\b

  pure_whitespace:
    name: markup.whitespace.bluespec
    match: \s+

  string:
    name: _STRING_DOUBLE
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.bluespec
        match: '\\.'

  single_comment:
    name: comment.line.double-slash.bluespec
    match: '//.*'

  block_comment:
    name: _BLOCK_COMMENT
    begin: '/\*'
    end: '\*/'

  attribute:  # e.g. (* synthesize *)
    name: _DIRECTIVE
    match: '\(\* .* \*\)'
  
  type:
    name: _CLASS
    match: (TYPE)  # wrap parentheses because first group non-capture
  
  lower_identifier:
    name: _VARIABLE
    match: ((LOWER_IDENTIFIER)\b)
  
  system_task:
    name: _SYSTEM_FUNCTION
    match: \$(IDENTIFIER_CHAR)*\b

  integer:
    patterns:
      - name: _NUMBER
        match: \d*'(?:d[\d_]+|(h|x)[\h_]+|o[0-7_]+|b[01_]+)\b  # 32'd2424 kind
      - name: _NUMBER
        match: '\b\d+\b'  # normal kind
  
  real:
    patterns:
      - name: _NUMBER
        match: '\b\d[\d_]*(?:\.[\d_]+)?(?:[Ee][+-]?[\d_]+)?\b'

scopeName: source.bsv