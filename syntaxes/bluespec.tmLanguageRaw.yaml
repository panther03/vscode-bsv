
## Copyright 2023 Martin Chan
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without
## restriction, including without limitation the rights to use, copy,
## modify, merge, publish, distribute, sublicense, and/or sell copies
## of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: Bluespec SystemVerilog

injectionSelector:
  "L:meta.embedded.block.bluespec"

patterns:
  - include: '#always'
  - include: '#remainder'
  - include: '#catch_error'  # catch-all
repository:

  always:
    patterns:
      - include: '#whitespace'
      - include: '#directives'
      - include: '#groupings'
      - include: '#keyword'
      - include: '#literal'

  remainder:
    patterns:
      - include: "#declarations"
      - include: "#action_analysis"
      - include: '#enum_detect'  # niche rule
      - include: '#identifier'

  catch_error:
    patterns:
      - name: _INVALID(question)
        match: (\?)
      - name: _INVALID(catch_all) 
        match: \w+

###

  whitespace:  # Check macros.h
    patterns:
      - include: 'pure_whitespace'
      - include: '#ifdef' 
      - include: '#block_comment'
      - include: '#single_comment'

  directives:
    patterns:
      - include: '#import'
      - include: '#export'
      - include: '#include'
      - include: '#attribute'
      - include: '#define'
      - include: '#tagged_tag'

  groupings:  # things behave differently in groupings
    patterns: 
      - include: '#parameter'  # follows a #; e.g. Bit#(4)  
      - include: '#conditional'  # if and if-less guard (&&&)
      - include: '#argument_list'  # in call only
      - include: '#curly_braces'
      - include: '#case'  # simple case
      - include: '#index'  # e.g. arr[a.b][12]
      - include: '#equal_assignment'  # not implemented

  keyword:
    patterns:
      - name: _PUNCTUATION
        match: '[;\(\)\{\}]'
      - name: _VOID
        match: (void)
      - include: '#action'
      - include: '#return_statement'
      - include: '#control'
      - include: '#declare_keyword'
      - include: '#minispec'
      - name: _DEPRECATED
        match: \b(SV_KEYWORDS)\b

  literal:
    patterns:
      - include: '#string'
      - include: '#real'
      - include: '#integer'

  declarations:
    patterns:
      - name: _FUNCTION
        match: (?<=module\s+)(LOWER_IDENTIFIER)(#?)
      - name: _FUNCTION
        match: (?<=rule\s+)(LOWER_IDENTIFIER)
      - name: _FUNCTION
        match: (?x)
          (?<=(method|function).*)
          (LOWER_IDENTIFIER)
          (?=(\s+if|\s*[;\(=]))
      - include: '#dont_care_equal'
      - include: '#probable_ternary_q'
      - name: _FUNCTION
        match: (?<=interface\s+)(LOWER_IDENTIFIER)
      - include: '#declare_enum_category'

  action_analysis:
    patterns:
      - include: '#standard_prelude_check'
      - include: '#left_writing'
      - include: '#actionvalue' # <- also covers func
      - include: '#dot_access'  # later decompose into method and struct
      - include: '#standalone_call'  # functions

  identifier:
    patterns:
      - include: '#system_task'
      - include: '#operator'  ## Down here so we can match the better stuff
      - include: '#catch_miscase'  ## TODO
      - name: _CATCH_ALL_UPPER
        match: (TYPE)
      - name: _CATCH_ALL_LOWER
        match: (LOWER_IDENTIFIER)

##

  standard_prelude_check:
    patterns:
      - include: '#prelude_system'
      - include: '#prelude_module'
      - include: '#prelude_pure'
      - include: '#prelude_action'
      - include: '#prelude_actionvalue'

  ## prelude_system:
  ##   name: _PRELUDE_SYSTEM
  ##   match: (?x)\b
  ##     (?:error|warning|message|)M?|
  ##     genC|genVerilog|genPackageName|genModuleName|
  ##     compilerVersion|buildVersion|date|epochTime|
  ##     hIs(?:EOF|Open|Closed|Readable|Writeable)
  ##     )\b

  ## prelude_module:
  ##   name: _PRELUDE_MODULE
  ##   match: (?x)\b
  ##     (?:openFile#?|hClose#?  |
  ##     hPut(Str|StrLn|Char)  |  #### some reason compilation doesn't like this line
  ##     hGet(?:Char|Line)
  ##     )\b

  prelude_pure:  ## can't seem to support {x,y} Verilog bit concatenate operator
    name: _PRELUDE_PURE
    match: (?x)\b
      (?:max|min|abs|
      (un)?signedMul|(un)?signedQuot|
      compose|composeM|id|constFn|flip|
      (un)?curry|parity|
      reverseBits|countOnes|countZeros[ML]SB|truncateLSB|
      gcd|lcm|while|when|
      (?:zeroE|signE|e)xtend|truncate|
      split|
      mod|quot|rem|
      strConcat|
      string(?:Length|Split|Head|Tail|Cons|
      ToCharList|ListToString|quote|doubleQuote)|
      charTo(?:String|Integer)
      integerToChar|
      is(?:Space|Lower|Upper|Alpha(Num)?|(Oct|Hex)?Digit)|
      to(?:Upper|Lower)|
      (?:hexD|d)igitTo(?:Integer|Bits)|
      (?:integer|bits)To(Hex)?Digit|
      fromMaybe|isValid|
      tuple[2-8]|tpl_[1-8]
      )\b

  prelude_action:
    name: _PRELUDE_ACTION
    match: (?x)\b
      (?:hFlush|hSetBuffering)\b

  prelude_actionvalue:
    name: _PRELUDE_ACTION
    match: (?x)\b
      (?:hGetBuffering)\b

  probable_ternary_q:
    name: _TERNARY_Q
    match: (?x)
      (\?)
      (?=.*:)

  ## Very careful heuristic; not strictly necessary by spec.
  declare_enum_category:  ## captures both struct and enum now
    name: _ENUM_CATEGORY
    match: (ENUM)(?=\s+deriving)

  minispec:
    name: _TYPE_PRIMITIVE
    match: (\binput\b)

  sole_unpack:
    name: _VARIABLE
    match: (?x)
      (?<=tagged\s+(UPPER_IDENTIFIER)\s+\.\s*)
      (LOWER_IDENTIFIER)
      (?=\s*:)

  operator:
    name: _OPERATOR
    match: (?x) (
      (?:(\?(?=\s*$)))      |
      (?:<-|<=|[\.,:])   |
      (?:<<|>>|<=|>=|<|>) |
      (?:[\!=]?=)         |
      &&&                 |
      [\|&]{2}            |
      (?:~?[&\|\^])       |
      \^~                 |
      [\+\-!~]            |
      [\*\/%]             )

  dont_care_bare:
    name: _DONT_CARE
    match: (\?)

  dont_care_colon:  ## : ?
    name: _DONT_CARE
    match: (?x)
      (?<=:\s*)
      (\?)

  dont_care_equal: ## = ?
    name: _DONT_CARE
    match: (?x)
      (?<==\s*)
      (\?)

  index:  ## Good rule
    begin: (\[)
    end: (\])
    patterns:
      - include: '#always'
      - include: '#lower_identifier'
      - include: '#dot_access'
      ## - include: '#remainder'
      - include: '#catch_error'  # catch-all
    captures:
      1:
        name: _PUNCTUATION
    name: __INDEX

  case:
    begin: (case)
    end: (endcase)
    patterns:
      - include: '#always'
      - include: '#tagged_tag'
      - name: _ENUM
        match: (?<!:.*)(ENUM)(?=[^;]*:?)
      - include: '#sole_unpack'
      - include: '#dont_care_colon'
      - include: '#remainder'
      - include: '#catch_error'  # catch-all
    captures:
      1:
        name: _CONTROL
    name: __CASE

  conditional: ## great example of a good meta rule
    begin: (?x)
      (?<=
        (?:if                    |
        rule.*(LOWER_IDENTIFIER) |
        (<?=)
        )
      )
      (?:\s*\()
    end: (?x)
      (?:\))
    patterns:  # short-circuit from context
      - include: '#always'
      - include: '#dot_read_all'
      - include: '#tagged_tag'
      - name: _ENUM
        match: (?<!tagged\s+)(UPPER_IDENTIFIER)(?!\s+(LOWER_IDENTIFIER))
      - include: '#remainder'
      - include: '#catch_error'  # catch-all
    name: __CONDITIONAL

  argument_list:
    begin: (?x)
      (?<!\b(?:module|method|function|for|return|deriving)\b.*)
      (?<=(LOWER_IDENTIFIER))
      (?:\s*\()
    end: (?x)
      (?:\))
    patterns:
      - include: '#always'
      - include: '#dot_read_all'
      - include: '#system_task'
      - include: '#lower_identifier'
      - include: '#tagged_union_instantiation'
      - include: '#dont_care_bare'
      - name: _ENUM
        match: (ENUM)(?!\s*[#\(\{])
      - include: '#type'
      - include: '#catch_error'  # catch-all
    name: __ARGUMENT_LIST

  curly_braces:  # typedef enum, match, tagged matching
    begin: (?x)
      (?<!(?:union\s+tagged|struct)\s*)
      (?:\{)
    end: (?:\})
    patterns:
      - include: '#always'
      - include: '#curly_braces'
      - include: '#dot_read_all'
      - include: '#lower_identifier'
      - name: _ENUM
        match: (ENUM)
      - include: '#dont_care_colon'
      - include: '#probable_ternary_q'
      - include: '#catch_error'
    captures:
      1:
        name: _PUNCTUATION
    name: _CURLY_BRACES

  dot_read_all:
    name: _VARIABLE
    match: (DOT_ACCESS)

  enum_detect:  # very narrow <=/= Enum; case
    name: _ENUM
    match: (?<=(?:(<?=)|:)\s*)(UPPER_IDENTIFIER)(?=\s*;)

  left_writing:  # e.g., state <= True
    name: _FUNCTION
    match: ((LOWER_IDENTIFIER))(?=\s*(ARRAY_INDEXING)<=)

  tagged_tag:
    name: _TAG
    match: (?<=tagged\s+)(UPPER_IDENTIFIER)

  tagged_union_instantiation:
    name: _TAG
    match: (?x)
      (UPPER_IDENTIFIER)
      (?=\s*\()

  struct_instantiation:
    name: _STRUCT
    match: (?x)
      (UPPER_IDENTIFIER)
      (?=\s*\{)

  ## we need to handle inside (multiline) brackets separately
  ## very ambiguous: could be action, read, or struct_access
  dot_access:
    patterns:
      - include: '#interface_dot'
      - include: '#assignment_dot' # =
      - include: '#lone_dot'  # (not in brackets or case-case(imperfect))
      - include: '#assign_to_dot'
      - include: '#generic_dot' # leftover

  lone_dot:  # TODO fold into multiline rules
    name: _FUNCTION  # make sure not an arg
    match: (?x)
      (DOT_ACCESS)(?!.*=.*)

  assign_to_dot:
    name: _VARIABLE
    match: (?x)
      (DOT_ACCESS)(?=.*=.*)

  actionvalue:
    name: _FUNCTION  # on right side of <-; ActionValue
    match: (?x)
      (?<=(<-).*)
      (LOWER_IDENTIFIER)
      (?!\s*\.)

  interface_dot:  # bug catcher
    name: _VARIABLE
    match: (DOT_ACCESS)(?=\s*\.)

  assignment_dot:  # imperfect for method m = e.m;
    name: _VARIABLE  # on right side of =; assume struct access or read
    match: (?x)
      (?<=([=:]).*)
      (DOT_ACCESS)

  generic_dot:  # bug catcher
    name: _INVALID
    match: (DOT_ACCESS)

  standalone_call_action:
    name: _FUNCTION
    match: (LOWER_IDENTIFIER)(?=\s*\()

  standalone_call_pure:
    name: _VARIABLE
    match: (LOWER_IDENTIFIER)(?=\s*\()

  standalone_call:   # ; do_this; or_this(arg);
    name: _FUNCTION
    match: (?x)
      (?<=(^\s*|if\s*\(.*\)[^=]*)|interface.*)
      (LOWER_IDENTIFIER)
      (?=\s*[;\(])

  ifdef:
    patterns:
      - match: (`ifdef)(?:\s+)(ANY_IDENTIFIER)
        captures:
          1:
            name: _CONTROL
          2:
            name: _DIRECTIVE
      - match: (`endif)
        name: _CONTROL
  ## begin: (`ifdef)(?:\s+)(ANY_IDENTIFIER)
  ## end: (`endif)
  ## beginCaptures:
  ##   1:
  ##     name: _CONTROL
  ##   2:
  ##     name: _DIRECTIVE
  ## endCaptures:
  ##   1:
  ##     name: _CONTROL
  ## patterns:
  ##   - include: $self

  define:
    match: (`define)(?:\s+)(ANY_IDENTIFIER)
    captures:
      1:
        name: _CONTROL
      2:
        name: _DIRECTIVE

  include:
    name: _CONTROL
    match: (`include)

  import:
    name: _SUPPORT
    match: (?x)
      (?<=import\s+)
      (UPPER_IDENTIFIER)

  export:
    patterns:
      - include: '#export_interface'
      - include: '#export_module'

  export_interface:
    name: _EXPORT_INTERFACE
    match: (?x)
      (?<=export\s+)
      (UPPER_IDENTIFIER)

  export_module:
    name: _EXPORT_MODULE
    match: (?x)
      (?<=export\s+)
      (LOWER_IDENTIFIER)
  
  action:
    patterns:
      - name: _ACTION
        match: (?:ActionValue\s*#|Action\b)

  control:
    patterns:
      - name: _CONTROL
        match: (?x)\b
          (?:case|match|matches|endcase|default|type|else|for|if|return|while|import|export)\b
  
  declare_keyword:
    patterns:
      - name: _TYPE_PRIMITIVE
        match: (?x)\b
          (?:function|instance|interface|method|module|package|
          rule|rules|typeclass|typedef|struct|tagged|union|enum|
          endfunction|endinstance|endinterface|endmethod|endmodule|
          endpackage|endrule|endrules|endtypeclass|deriving|begin|end|
          let|action|endaction|provisos|actionvalue|endactionvalue)\b

  pure_whitespace:
    name: markup.whitespace.bluespec
    match: \s+

  string:
    begin: '"'
    end: '"'
    patterns:
      - name: _ESCAPE
        match: '\\.'
      - name: _FORMAT
        match: (%[0-9]*[dxhob])
    name: _STRING_DOUBLE

  single_comment:
    name: comment.line.double-slash.bluespec
    match: '//.*'

  block_comment:
    name: _BLOCK_COMMENT
    begin: '/\*'
    end: '\*/'

  attribute:  # e.g. (* synthesize *)
    name: _DIRECTIVE
    match: '\(\* .* \*\)'
  
  type:
    name: _CLASS
    match: (TYPE)  # wrap parentheses because first group non-capture
  
  lower_identifier:
    name: _VARIABLE
    match: ((LOWER_IDENTIFIER)\b)
  
  system_task:
    name: _SYSTEM_FUNCTION
    match: \$(IDENTIFIER_CHAR)*\b

  integer:
    patterns:
      - name: _NUMBER
        match: \d*'(?:d[\d_]+|(h|x)[\h_]+|o[0-7_]+|b[01_]+)\b  # 32'd2424 kind
      - name: _NUMBER
        match: '\b\d+\b'  # normal kind
  
  real:
    patterns:
      - name: _NUMBER
        match: '\b\d[\d_]*(?:\.[\d_]+)?(?:[Ee][+-]?[\d_]+)?\b'

scopeName: source.bsv