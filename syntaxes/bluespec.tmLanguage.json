{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Bluespec SystemVerilog",
  "patterns": [
    {
      "include": "#always"
    },
    {
      "include": "#remainder"
    },
    {
      "name": "invalid.bluespec",
      "match": "\\w+"
    }
  ],
  "repository": {
    "always": {
      "patterns": [
        {
          "include": "#whitespace"
        },
        {
          "include": "#directives"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#declarations"
        }
      ]
    },
    "remainder": {
      "patterns": [
        {
          "include": "#action_detect"
        },
        {
          "include": "#enum_detect"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "whitespace": {
      "patterns": [
        {
          "include": "pure_whitespace"
        },
        {
          "include": "#ifdef"
        },
        {
          "include": "#block_comment"
        },
        {
          "include": "#single_comment"
        }
      ]
    },
    "directives": {
      "patterns": [
        {
          "include": "#attribute"
        },
        {
          "include": "#define"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "include": "#parameter"
        },
        {
          "include": "#conditional"
        },
        {
          "include": "#argument_list"
        },
        {
          "include": "#curly_braces"
        },
        {
          "include": "#case"
        },
        {
          "include": "#index"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "punctuation.bluespec",
          "match": "[;\\(\\)\\{\\}]"
        },
        {
          "name": "constant.language.bluespec",
          "match": "\\?"
        },
        {
          "include": "#action"
        },
        {
          "include": "#control"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#declare_keyword"
        },
        {
          "name": "invalid.deprecated.bluespec",
          "match": "\\b((?:alias|always|always_comb|always_ff|always_latch|and|assert|assert_strobe |assign|assume|automatic|before|begin|end|bind|bins|binsof|bit|break|buf |bufif0|bufif1|byte|casex|casez|cell|chandle|class|endclass |clocking|endclocking|cmos|config|endconfig|const|constraint|context|continue |cover|covergroup|endgroup|coverpoint|cross|deassign|default|defparam|design |disable|dist|do|edge|event|expect|export|extends|extern|final |first_match|force|foreach|forever|fork|forkjoin |generate|endgenerate|genvar|highz0|highz1|iff|ifnone|ignore_bins |illegal_bins|import|incdir|include|initial|inout|input|inside|instance |int|integer|intersect|join|join_any|join_none |large|liblist|library|local|localparam|logic|longint|macromodule |matches|medium|modport|nand|negedge|new|nmos|nor |noshowcancelled|not|notif0|notif1|null|or|output|package|endpackage |packed|parameter|pmos|posedge|primitive|endprimitive|priority|program |endprogram|property|endproperty|protected|pull0|pull1|pulldown|pullup |pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence |rcmos|real|realtime|ref|reg|release|repeat|rnmos|rpmos|rtran |rtranif0|rtranif1|scalared|sequence|endsequence|shortint|shortreal |showcancelled|signed|small|solve|specify|endspecify|specparam|static |string|strong0|strong1|super|supply0|supply1|table|endtable |tagged|task|endtask|this|throughout|time|timeprecision|timeunit|tran |tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type |union|unique|unsigned|use|var|vectored|virtual|void|wait|wait_order |wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor))\\b"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#real"
        },
        {
          "include": "#integer"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "entity.name.function.bluespec",
          "match": "(?<=module\\s+)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)(#?)"
        },
        {
          "name": "entity.name.function.bluespec",
          "match": "(?<=rule\\s+)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)"
        },
        {
          "name": "entity.name.function.bluespec",
          "match": "(?x) (?<=(method|function).*) ((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b) (?=(\\s+if|\\s*[;\\(]))"
        }
      ]
    },
    "action_detect": {
      "patterns": [
        {
          "include": "#left_assignment"
        },
        {
          "include": "#right_actionvalue"
        },
        {
          "include": "#dot_access"
        },
        {
          "include": "#standalone_call"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "include": "#system_task"
        },
        {
          "include": "#type"
        },
        {
          "include": "#lower_identifier"
        }
      ]
    },
    "sole_unpack": {
      "name": "variable.bluespec",
      "match": "(?x) (?<=tagged\\s+((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\b)\\s+\\.\\s*) ((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b) (?=\\s*:)"
    },
    "operator": {
      "name": "keyword.operator.bluespec",
      "match": "(?x) ( (?:<-|<=|\\.|,|:) | (?:<<|>>|<=|>=|<|>) | (?:[\\!=]?=) | [\\|&]{2} | &&& | (?:~?[&\\|\\^]) | \\^~ | [\\+\\-!~] | [\\*\\/%] )"
    },
    "index": {
      "begin": "(\\[)",
      "end": "(\\])",
      "patterns": [
        {
          "include": "#always"
        },
        {
          "include": "#lower_identifier"
        },
        {
          "include": "#dot_access"
        }
      ],
      "captures": {
        "1": {
          "name": "punctuation.bluespec"
        }
      }
    },
    "case": {
      "begin": "(case)",
      "end": "(endcase)",
      "patterns": [
        {
          "include": "#always"
        },
        {
          "name": "variable.other.constant.bluespec",
          "match": "((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\b)(?=\\s*:)"
        },
        {
          "include": "#sole_unpack"
        },
        {
          "include": "#remainder"
        }
      ],
      "captures": {
        "1": {
          "name": "keyword.control.bluespec"
        }
      }
    },
    "conditional": {
      "begin": "(?x) (?<= (?:if | rule.*((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b) ) ) (?:\\s*\\()",
      "end": "(?x) (?:\\))",
      "patterns": [
        {
          "include": "#always"
        },
        {
          "include": "#dot_read_all"
        },
        {
          "name": "variable.other.constant.bluespec",
          "match": "(?<!tagged\\s+)((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\b)(?!\\s+((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b))"
        },
        {
          "include": "#remainder"
        }
      ]
    },
    "argument_list": {
      "begin": "(?x) (?<!(?:module|method|function|for|return|deriving).*) (?<=((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)) (?:\\s*\\()",
      "end": "(?x) (?:\\))",
      "patterns": [
        {
          "include": "#always"
        },
        {
          "include": "#dot_read_all"
        },
        {
          "include": "#lower_identifier"
        },
        {
          "name": "variable.other.constant.bluespec",
          "match": "((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\b)(?![#\\(\\{])"
        },
        {
          "include": "#type"
        }
      ]
    },
    "curly_braces": {
      "begin": "(?x) (?<!(?:union\\s+tagged|struct)\\s*) (?:\\{)",
      "end": "(?:\\})",
      "patterns": [
        {
          "include": "#always"
        },
        {
          "include": "#curly_braces"
        },
        {
          "include": "#dot_read_all"
        },
        {
          "include": "#lower_identifier"
        },
        {
          "name": "variable.other.constant.bluespec",
          "match": "((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\b)"
        }
      ],
      "captures": {
        "1": {
          "name": "punctuation.bluespec"
        }
      }
    },
    "dot_read_all": {
      "name": "variable.bluespec",
      "match": "(((?<=\\.\\s*)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)))"
    },
    "enum_detect": {
      "name": "variable.other.constant.bluespec",
      "match": "(?<=(<=)\\s*)((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\b)(?=\\s*;)"
    },
    "left_assignment": {
      "name": "entity.name.function.bluespec",
      "match": "(((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b))(?=\\s*((\\[.*\\]\\s*)*)<=)"
    },
    "right_actionvalue": {
      "name": "entity.name.function.bluespec",
      "match": "(?<=<-)(?:\\s*)(((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b))(?!\\.)"
    },
    "dot_access": {
      "patterns": [
        {
          "include": "#assignment_dot"
        },
        {
          "include": "#actionvalue_dot"
        },
        {
          "include": "#lone_dot"
        },
        {
          "include": "#generic_dot"
        }
      ]
    },
    "lone_dot": {
      "name": "entity.name.function.bluespec",
      "match": "(?x) (?<![\\(\\[\\{].*) (((?<=\\.\\s*)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)))"
    },
    "actionvalue_dot": {
      "name": "entity.name.function.bluespec",
      "match": "(?x) (?<=(<-).*) (((?<=\\.\\s*)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)))"
    },
    "assignment_dot": {
      "name": "variable.bluespec",
      "match": "(?x) (?<=(=).*) (((?<=\\.\\s*)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)))"
    },
    "generic_dot": {
      "name": "invalid.bluespec",
      "match": "(((?<=\\.\\s*)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)))"
    },
    "standalone_call": {
      "name": "entity.name.function.bluespec",
      "match": "(?x) (?<=(^\\s*|if\\s*\\(.*\\).*)) ((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b) (?=\\s*[;\\(])"
    },
    "ifdef": {
      "begin": "(`ifdef)(?:\\s+)((?:[\\p{Alpha}\\d\\$_])+)",
      "end": "(`endif)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.bluespec"
        },
        "2": {
          "name": "meta.preprocessor.bluespec"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.bluespec"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "define": {
      "match": "(`define)(?:\\s+)((?:[\\p{Alpha}\\d\\$_])+)",
      "captures": {
        "1": {
          "name": "keyword.control.bluespec"
        },
        "2": {
          "name": "meta.preprocessor.bluespec"
        }
      }
    },
    "action": {
      "patterns": [
        {
          "name": "constant.language.bluespec",
          "match": "(?:ActionValue\\s*#|Action)"
        }
      ]
    },
    "control": {
      "patterns": [
        {
          "name": "keyword.control.bluespec",
          "match": "(?x)\\b (?:case|match|matches|endcase|type|else|for|if|return|while|import)\\b"
        }
      ]
    },
    "declare_keyword": {
      "patterns": [
        {
          "name": "storage.type.bluespec",
          "match": "(?x)\\b (?:function|instance|interface|method|module|package| rule|rules|typeclass|typedef|struct|tagged|union|enum| endfunction|endinstance|endinterface|endmethod|endmodule| endpackage|endrule|endrules|endtypeclass|deriving|begin|end| let|action|endaction)\\b"
        }
      ]
    },
    "pure_whitespace": {
      "name": "markup.whitespace.bluespec",
      "match": "\\s+"
    },
    "string": {
      "name": "string.quoted.double.bluespec",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.bluespec",
          "match": "\\\\."
        }
      ]
    },
    "single_comment": {
      "name": "comment.line.double-slash.bluespec",
      "match": "//.*"
    },
    "block_comment": {
      "name": "comment.block.bluespec",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "attribute": {
      "name": "meta.preprocessor.bluespec",
      "match": "\\(\\* .* \\*\\)"
    },
    "type": {
      "name": "entity.name.class.bluespec",
      "match": "(?:((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\b)(\\s*#)?)"
    },
    "lower_identifier": {
      "name": "variable.bluespec",
      "match": "(((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)\\b)"
    },
    "system_task": {
      "name": "support.function.bluespec",
      "match": "\\$(?:[\\p{Alpha}\\d\\$_])*\\b"
    },
    "integer": {
      "patterns": [
        {
          "name": "constant.numeric.bluespec",
          "match": "\\d*'(?:d[\\d_]+|(h|x)[\\h_]+|o[0-7_]+|b[01_]+)\\b"
        },
        {
          "name": "constant.numeric.bluespec",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "real": {
      "patterns": [
        {
          "name": "constant.numeric.bluespec",
          "match": "\\b\\d[\\d_]*(?:\\.[\\d_]+)?(?:[Ee][+-]?[\\d_]+)?\\b"
        }
      ]
    }
  },
  "scopeName": "source.bsv"
}
