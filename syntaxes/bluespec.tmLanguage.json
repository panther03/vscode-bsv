{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Bluespec SystemVerilog",
  "patterns": [
    {
      "include": "#always"
    },
    {
      "include": "#remainder"
    }
  ],
  "repository": {
    "always": {
      "patterns": [
        {
          "include": "#whitespace"
        },
        {
          "include": "#directives"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#literal"
        }
      ]
    },
    "remainder": {
      "patterns": [
        {
          "include": "#declarations"
        },
        {
          "include": "#action_detect"
        },
        {
          "include": "#enum_detect"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "whitespace": {
      "patterns": [
        {
          "include": "pure_whitespace"
        },
        {
          "include": "#ifdef"
        },
        {
          "include": "#block_comment"
        },
        {
          "include": "#single_comment"
        }
      ]
    },
    "directives": {
      "patterns": [
        {
          "include": "#attribute"
        },
        {
          "include": "#define"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "include": "#conditional"
        },
        {
          "include": "#argument_list"
        },
        {
          "include": "#enum_list"
        },
        {
          "include": "#case"
        },
        {
          "include": "#case_matches"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "include": "#action"
        },
        {
          "include": "#control"
        },
        {
          "include": "#declare_keyword"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#real"
        },
        {
          "include": "#integer"
        }
      ]
    },
    "action_detect": {
      "patterns": [
        {
          "include": "#left_assignment"
        },
        {
          "include": "#right_actionvalue"
        },
        {
          "include": "#dot_access"
        },
        {
          "include": "#standalone_call"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "include": "#system_task"
        },
        {
          "include": "#type"
        },
        {
          "include": "#lower_identifier"
        }
      ]
    },
    "conditional": {
      "begin": "(?x) (?<=(?:if\\s+|method.*)) (?:\\()",
      "end": "(?x) (?:\\))",
      "patterns": [
        {
          "include": "#always"
        },
        {
          "name": "variable.bluespec",
          "match": "(((?<=\\.\\s*)(?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b)))"
        },
        {
          "name": "variable.other.constant.bluespec",
          "match": "(?<!tagged\\s+)(?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)"
        },
        {
          "include": "#remainder"
        }
      ]
    },
    "enum_detect": {
      "name": "variable.other.constant.bluespec",
      "match": "(?<=(<=)\\s*)(?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)(?=\\s*;)"
    },
    "left_assignment": {
      "name": "entity.name.function.bluespec",
      "match": "((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b))(?=\\s*((\\[.*\\]\\s*)*)<=)"
    },
    "right_actionvalue": {
      "name": "entity.name.function.bluespec",
      "match": "(?<=<-)(?:\\s*)((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b))(?!\\.)"
    },
    "dot_access": {
      "patterns": [
        {
          "include": "#assignment_dot"
        },
        {
          "include": "#actionvalue_dot"
        },
        {
          "include": "#lone_dot"
        },
        {
          "include": "#generic_dot"
        }
      ]
    },
    "lone_dot": {
      "name": "entity.name.function.bluespec",
      "match": "(?x) (?<![\\(\\[\\{].*) (((?<=\\.\\s*)(?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b)))"
    },
    "actionvalue_dot": {
      "name": "entity.name.function.bluespec",
      "match": "(?x) (?<=(<-).*) (((?<=\\.\\s*)(?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b)))"
    },
    "assignment_dot": {
      "name": "variable.bluespec",
      "match": "(?x) (?<=(=).*) (((?<=\\.\\s*)(?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b)))"
    },
    "generic_dot": {
      "name": "invalid.bluespec",
      "match": "(((?<=\\.\\s*)(?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b)))"
    },
    "standalone_call": {
      "name": "entity.name.function.bluespec",
      "match": "(?<=^\\s*)(?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b)(?=\\s*[;\\(])"
    },
    "ifdef": {
      "begin": "(`ifdef)(?:\\s+)((?:[\\p{Alpha}\\d\\$_])+)",
      "end": "(`endif)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.bluespec"
        },
        "2": {
          "name": "meta.preprocessor.bluespec"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.bluespec"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "define": {
      "match": "(`define)(?:\\s+)((?:[\\p{Alpha}\\d\\$_])+)",
      "captures": {
        "1": {
          "name": "keyword.control.bluespec"
        },
        "2": {
          "name": "meta.preprocessor.bluespec"
        }
      }
    },
    "action": {
      "patterns": [
        {
          "name": "constant.language.bluespec",
          "match": "(?:ActionValue\\s*#|Action)"
        }
      ]
    },
    "control": {
      "patterns": [
        {
          "name": "keyword.control.bluespec",
          "match": "(?x)\\b (?:case|matches|endcase|type|else|for|if|return|while)\\b"
        }
      ]
    },
    "declare_keyword": {
      "patterns": [
        {
          "name": "storage.type.bluespec",
          "match": "(?x)\\b (?:function|instance|interface|method|module|package| rule|rules|typeclass|typedef|struct|tagged|union|enum| endfunction|endinstance|endinterface|endmethod|endmodule| endpackage|endrule|endrules|endtypeclass|deriving|begin|end| let|action|endaction)\\b"
        }
      ]
    },
    "pure_whitespace": {
      "name": "markup.whitespace.bluespec",
      "match": "\\s+"
    },
    "string": {
      "name": "string.quoted.double.bluespec",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.bluespec",
          "match": "\\\\."
        }
      ]
    },
    "single_comment": {
      "name": "comment.line.double-slash.bluespec",
      "match": "//.*"
    },
    "block_comment": {
      "name": "comment.block.bluespec",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "attribute": {
      "name": "meta.preprocessor.bluespec",
      "match": "\\(\\* .* \\*\\)"
    },
    "type": {
      "name": "entity.name.class.bluespec",
      "match": "(?:(?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\s*#?)"
    },
    "lower_identifier": {
      "name": "variable.bluespec",
      "match": "((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*\\b)\\b)"
    },
    "system_task": {
      "name": "support.function.bluespec",
      "match": "\\$(?:[\\p{Alpha}\\d\\$_])*\\b"
    },
    "integer": {
      "patterns": [
        {
          "name": "constant.numeric.bluespec",
          "match": "\\d*'(?:d[\\d_]+|(h|x)[\\h_]+|o[0-7_]+|b[01_]+)\\b"
        },
        {
          "name": "constant.numeric.bluespec",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "real": {
      "patterns": [
        {
          "name": "constant.numeric.bluespec",
          "match": "\\b\\d[\\d_]*(?:\\.[\\d_]+)?(?:[Ee][+-]?[\\d_]+)?\\b"
        }
      ]
    }
  },
  "scopeName": "source.bsv"
}
