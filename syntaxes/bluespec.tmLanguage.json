{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Bluespec SystemVerilog",
  "patterns": [
    {
      "include": "#whitespace"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#literal"
    },
    {
      "include": "#enum_detect"
    },
    {
      "include": "#action_detect"
    },
    {
      "include": "#identifier"
    }
  ],
  "repository": {
    "whitespace": {
      "patterns": [
        {
          "include": "#block_comment"
        },
        {
          "include": "#single_comment"
        },
        {
          "include": "#attribute"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "include": "#action"
        },
        {
          "include": "#control"
        },
        {
          "include": "#declare_keyword"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#real"
        },
        {
          "include": "#integer"
        }
      ]
    },
    "enum_detect": {
      "patterns": [
        {
          "include": "#enum_argument"
        },
        {
          "include": "#enum_list"
        },
        {
          "include": "#enum_conditional"
        },
        {
          "include": "#enum_case"
        }
      ]
    },
    "action_detect": {
      "patterns": [
        {
          "include": "#left_assignment"
        },
        {
          "include": "#right_actionvalue"
        },
        {
          "include": "#call"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "include": "#system_task"
        },
        {
          "include": "#type"
        },
        {
          "include": "#lower_identifier_args"
        },
        {
          "include": "#lower_identifier"
        }
      ]
    },
    "action": {
      "patterns": [
        {
          "name": "support.class.bluespec",
          "match": "(?:ActionValue\\s*#?|Action)"
        }
      ]
    },
    "control": {
      "patterns": [
        {
          "name": "keyword.control.bluespec",
          "match": "(?x)\\b (?:case|matches|endcase|type|else|for|if|return|while)\\b"
        }
      ]
    },
    "declare_keyword": {
      "patterns": [
        {
          "name": "storage.type.bluespec",
          "match": "(?x)\\b (?:function|instance|interface|method|module|package| rule|rules|typeclass|typedef|struct|tagged|union|enum| endfunction|endinstance|endinterface|endmethod|endmodule| endpackage|endrule|endrules|endtypeclass|deriving|begin|end)\\b"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.bluespec",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.bluespec",
          "match": "\\\\."
        }
      ]
    },
    "single_comment": {
      "name": "comment.line.double-slash.bluespec",
      "match": "//.*"
    },
    "block_comment": {
      "name": "comment.block.bluespec",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "attribute": {
      "name": "keyword.control.bluespec",
      "match": "\\(\\* .* \\*\\)"
    },
    "type": {
      "name": "entity.name.class.bluespec",
      "match": "((?:\\b\\p{Upper}(?:[\\p{Alpha}\\d\\$_])*)\\s*#?)"
    },
    "lower_identifier_args": {
      "name": "entity.name.function.bluespec",
      "match": "((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\s*\\()"
    },
    "lower_identifier": {
      "name": "variable.bluespec",
      "match": "((?:\\b\\p{Lower}(?:[\\p{Alpha}\\d\\$_])*)\\b)"
    },
    "system_task": {
      "name": "support.function.bluespec",
      "match": "\\$(?:[\\p{Alpha}\\d\\$_])*\\b"
    },
    "integer": {
      "patterns": [
        {
          "name": "constant.numeric.bluespec",
          "match": "\\d*'(?:d[\\d_]+|(h|x)[\\h_]+|o[0-7_]+|b[01_]+)\\b"
        },
        {
          "name": "constant.numeric.bluespec",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "real": {
      "patterns": [
        {
          "name": "constant.numeric.bluespec",
          "match": "\\b\\d[\\d_]*(?:\\.[\\d_]+)?(?:[Ee][+-]?[\\d_]+)?\\b"
        }
      ]
    }
  },
  "scopeName": "source.bsv"
}
